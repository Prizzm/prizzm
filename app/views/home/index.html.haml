%p
%p
%p
%p
%p
= text_field_tag :search, nil, :class => "jq_watermark", :id => "product-search-input", :title => "Keywords, Tags, Items, SKU..."

%script(type="text/html" id="product-autocomplete-result-template")
  .cell.img
    %img(src='{{ main_image_thumb }}')
  .cell
    %h2= link_to '{{ label }}', '#'
    .clear
    = link_to '{{ customer_count }} people have this', '#'
    Rating {{ rating }}
    %div{:id => "stars-wrapper-{{ id }}"}
      %select= options_for_select([1, 2, 3, 4, 5])

  .cell 
    = link_to "I have this", '#', :class => "button"
    = link_to "I want this", '#', :class => "button"
  :plain
    <script>
    $("#stars-wrapper-{{ id }}").stars({
      inputType: "select",
      disabled: true
    });
    </script>

:javascript
  $(document).ready(function(){
    $('#product-search-input').autocomplete({
      delay: 50,
      source: "#{search_products_path}",
      select: function(event, ui){
        //store selected.object_id to hidden field value
        var product_id = ui.item.id;
        $('#item_product_id').val(product_id);
      }
    })
    .data( "autocomplete" )._renderItem = function( ul, item ) {
      var template = $('#product-autocomplete-result-template').html();
      var parsed_template = _.template(template, item);
      var target_option = 'value="' + item.rating + '"';    // do simple string replace to select option, as I can't get Jquery
      var selected_option = target_option + ' selected="selected"';
      var autocomplete_html = parsed_template.replace(target_option, selected_option);
      var returnVal = $( "<li></li>" )
        .data( "item.autocomplete", item )
        .append(autocomplete_html)
        .appendTo( ul );
      $("#stars-wrapper-"+item.id).stars({ inputType: "select", disabled: true });
      return returnVal;
    };
  });

%article#own
  %header.clearfix
    %h1 Items you own
  .table#have-list.connectedSortable(data-possession='have')
    = render :partial => "home/owned_item", :collection => @user.owned_items.recently_updated, :as => :item

%article#own
  %header.clearfix
    %h1 Wishlist
  .table#want-list.connectedSortable(data-possession='want')
    = render :partial => "home/wanted_item", :collection => @user.wanted_items.recently_updated, :as => :item

:javascript
  $('.privacy_control').live('ajax:success', function(event, data, status, xhr){
    $(this).html(data.item_privacy);
    $(this).removeClass(data.old_privacy).addClass(data.item_privacy);
  });

:javascript
  $(document).ready(function(){
    //http://devblog.foliotek.com/2009/07/23/make-table-rows-sortable-using-jquery-ui-sortable/
    var fixHelper = function(e, ui) {
      ui.children().each(function() {
        $(this).width($(this).width());
      });
      return ui;
    };

    var getStartOrder = function(event, ui){
      this.old_table_order = $(this).sortable('toArray').toString();
      this.old_table_order = $(this).sortable('toArray');
    };

    var saveOrder = function(event,ui){
      var new_table_order = $(this).sortable('toArray');
      var user_id = $('table.interactions').attr('data-user');
      var possession_status = $(this).data('possession');
      var moved_item_id = $(ui.item).data('itemid');
      console.log(moved_item_id);
      $.post('/items/sort', {
        new_item_order: new_table_order, 
        old_item_order: this.old_table_order, 
        user_id: user_id,
        id: moved_item_id,
        possession_status: possession_status 
      }) //post order to rails
      $(this).find('.item_info').removeClass('hover');
      console.log("new poss: " + possession_status);
    };

    $('#have-list, #want-list').sortable({
      helper: fixHelper,
      start: getStartOrder, 
      update: saveOrder,
      connectWith: ".connectedSortable"
    }).disableSelection();

  });

